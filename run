#!/usr/bin/env bash
# KYGOX - Arch Linux Penetration Testing Toolkit Runner
# Author: 0xbv1 | 0xb0rn3 
# Contact: IG: theehiv3 | X: 0xbv1 | Threads: theehiv3 | Email: q4n0@proton.me
# License: Do whatever the hell you want, but don't blame me when it breaks
set -euo pipefail

# Core Configuration
readonly VERSION="0.1.9-alpha"
readonly VERSION_NAME="Venom"
readonly SCRIPT_NAME="KygoX"
readonly REPO_URL="https://github.com/0xb0rn3/kygox"
readonly ALT_REPO="https://github.com/0xb0rn3/krilin"
readonly CORE_SCRIPT=".core.py"

# Color Definitions
declare -r RED='\033[0;31m'
declare -r GREEN='\033[0;32m'
declare -r YELLOW='\033[0;33m'
declare -r BLUE='\033[0;34m'
declare -r PURPLE='\033[0;35m'
declare -r CYAN='\033[0;36m'
declare -r WHITE='\033[1;37m'
declare -r DARK='\033[1;30m'
declare -r BOLD='\033[1m'
declare -r DIM='\033[2m'
declare -r RESET='\033[0m'

# Status Indicators
declare -r SUCCESS="[${GREEN}✓${RESET}]"
declare -r ERROR="[${RED}✗${RESET}]"
declare -r INFO="[${BLUE}ℹ${RESET}]"
declare -r WARNING="[${YELLOW}⚠${RESET}]"
declare -r PROCESS="[${PURPLE}⚡${RESET}]"
declare -r SECURITY="[${CYAN}🔒${RESET}]"

# Banner Display
display_banner() {
    clear
    cat << 'EOF'
██╗  ██╗██╗   ██╗ ██████╗  ██████╗ ██╗  ██╗
██║ ██╔╝╚██╗ ██╔╝██╔════╝ ██╔═══██╗╚██╗██╔╝
███████╔╝ ╚████╔╝ ██║  ███╗██║   ██║ ╚███╔╝ 
██╔══██╗   ╚██╔╝  ██║   ██║██║   ██║ ██╔██╗ 
██║  ██║   ██║   ╚██████╔╝╚██████╔╝██╔╝ ██╗
╚═╝  ╚═╝   ╚═╝    ╚═════╝  ╚═════╝ ╚═╝  ╚═╝
═══════════════════════════════════════════════
   ARCH LINUX PENETRATION TESTING TOOLKIT
     Professional Security Arsenal Deployment
EOF
    echo -e "            ${BOLD}Version $VERSION | $VERSION_NAME${RESET}"
    echo -e "   ${DIM}Author: 0xbv1 | Contact: IG: theehiv3 | X: 0xbv1 | q4n0@proton.me${RESET}"
    echo -e "      ${DIM}Repository: $REPO_URL${RESET}"
    echo -e "${DARK}═══════════════════════════════════════════════${RESET}"
    echo
}

# Error handling
error_exit() {
    echo -e "${ERROR} $1" >&2
    exit "${2:-1}"
}

# Check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        error_exit "This script must be run as root. Use: sudo $0"
    fi
}

# Check for Python 3
check_python() {
    if ! command -v python3 >/dev/null 2>&1; then
        echo -e "${WARNING} Python 3 not found. Installing..."
        if command -v pacman >/dev/null 2>&1; then
            pacman -S --noconfirm python python-pip
        else
            error_exit "Cannot install Python 3. Please install it manually."
        fi
    fi
    
    # Check Python version
    local python_version
    python_version=$(python3 -c "import sys; print(f'{sys.version_info.major}.{sys.version_info.minor}')")
    if [[ $(echo "$python_version < 3.8" | bc -l 2>/dev/null || echo 1) -eq 1 ]]; then
        echo -e "${WARNING} Python $python_version detected. Recommended: 3.8+"
    fi
}

# Install required Python packages
setup_python_environment() {
    echo -e "${PROCESS} Setting up Python environment..."
    
    # Required Python packages for core functionality
    local required_packages=(
        "requests"
        "colorama" 
        "tqdm"
        "cryptography"
        "urllib3"
        "packaging"
    )
    
    for package in "${required_packages[@]}"; do
        if ! python3 -c "import $package" >/dev/null 2>&1; then
            echo -e "${INFO} Installing Python package: $package"
            python3 -m pip install --break-system-packages "$package" >/dev/null 2>&1 || \
            pip install --break-system-packages "$package" >/dev/null 2>&1 || \
            pip3 install --break-system-packages "$package" >/dev/null 2>&1 || {
                echo -e "${WARNING} Failed to install $package via pip"
            }
        fi
    done
}

# Download core script if missing
download_core_script() {
    if [[ ! -f "$CORE_SCRIPT" ]]; then
        echo -e "${PROCESS} Downloading core engine..."
        
        # Try multiple download methods
        local core_url="$REPO_URL/raw/main/$CORE_SCRIPT"
        
        if command -v curl >/dev/null 2>&1; then
            curl -fsSL "$core_url" -o "$CORE_SCRIPT" || {
                echo -e "${WARNING} Failed to download core script via curl"
                return 1
            }
        elif command -v wget >/dev/null 2>&1; then
            wget -q "$core_url" -O "$CORE_SCRIPT" || {
                echo -e "${WARNING} Failed to download core script via wget"
                return 1
            }
        else
            error_exit "Neither curl nor wget available for download"
        fi
        
        # Make executable
        chmod +x "$CORE_SCRIPT"
        echo -e "${SUCCESS} Core engine downloaded successfully"
    else
        echo -e "${INFO} Core engine found"
    fi
}

# Verify core script integrity
verify_core_script() {
    if [[ -f "$CORE_SCRIPT" ]]; then
        # Basic checks
        if ! python3 -m py_compile "$CORE_SCRIPT" 2>/dev/null; then
            echo -e "${WARNING} Core script syntax check failed. Re-downloading..."
            rm -f "$CORE_SCRIPT"
            download_core_script || error_exit "Failed to download valid core script"
        fi
        
        # Check if it's actually Python
        if ! head -n1 "$CORE_SCRIPT" | grep -q python; then
            echo -e "${WARNING} Core script appears corrupted. Re-downloading..."
            rm -f "$CORE_SCRIPT"
            download_core_script || error_exit "Failed to download valid core script"
        fi
    fi
}

# Check system compatibility
check_compatibility() {
    echo -e "${PROCESS} Checking system compatibility..."
    
    # Check for Arch-based system
    if [[ ! -f /etc/arch-release ]] && ! command -v pacman >/dev/null 2>&1; then
        if [[ -f /etc/debian_version ]] || command -v apt >/dev/null 2>&1; then
            echo -e "${WARNING} Detected Debian-based system"
            echo -e "${INFO} For Debian/Ubuntu systems, use: ${CYAN}$ALT_REPO${RESET}"
        fi
        error_exit "KygoX requires Arch Linux or Arch-based distributions"
    fi
    
    echo -e "${SUCCESS} Compatible Arch-based system detected"
}

# Usage information
show_usage() {
    echo -e "${BOLD}KygoX v$VERSION - Arch Linux Security Toolkit${RESET}"
    echo -e "${DARK}════════════════════════════════════════════════${RESET}"
    echo
    echo -e "${BOLD}USAGE:${RESET} sudo $0 [OPTIONS]"
    echo
    echo -e "${BOLD}OPTIONS:${RESET}"
    echo -e "${GREEN}-h, --help${RESET}              Show this help message"
    echo -e "${GREEN}-v, --version${RESET}           Show version information"
    echo -e "${GREEN}--setup${RESET}                 Setup environment only"
    echo -e "${GREEN}--check${RESET}                 Check system compatibility"
    echo
    echo -e "${BOLD}CORE FEATURES:${RESET}"
    echo -e "  • Self-healing installation system"
    echo -e "  • Signature verification and validation"
    echo -e "  • Comprehensive security toolkit"
    echo -e "  • BlackArch repository integration"
    echo -e "  • Real-time progress tracking"
    echo -e "  • Automatic error recovery"
    echo
    echo -e "${BOLD}EXAMPLES:${RESET}"
    echo -e "  sudo $0              # Run with default options"
    echo -e "  sudo $0 --setup      # Setup environment only"
    echo -e "  sudo $0 --check      # Check compatibility"
    echo
    echo -e "${DIM}For more information: $REPO_URL${RESET}"
    echo
}

# Version information
show_version() {
    echo -e "${BOLD}KygoX Security Toolkit${RESET}"
    echo -e "Version: $VERSION ($VERSION_NAME)"
    echo -e "Author: 0xbv1 | 0xb0rn3"
    echo -e "Repository: $REPO_URL"
    echo -e "Python Engine: $(python3 --version 2>/dev/null || echo 'Not found')"
    echo -e "System: $(uname -s) $(uname -m)"
    echo -e "Distribution: $(cat /etc/os-release 2>/dev/null | grep PRETTY_NAME | cut -d'"' -f2 || echo 'Unknown')"
}

# Main execution
main() {
    # Parse arguments
    case "${1:-}" in
        -h|--help)
            display_banner
            show_usage
            exit 0
            ;;
        -v|--version)
            show_version
            exit 0
            ;;
        --setup)
            display_banner
            check_root
            check_python
            setup_python_environment
            download_core_script
            verify_core_script
            echo -e "${SUCCESS} Environment setup completed"
            exit 0
            ;;
        --check)
            display_banner
            check_compatibility
            check_python
            echo -e "${SUCCESS} System compatibility verified"
            exit 0
            ;;
        "")
            # Default execution
            ;;
        *)
            echo -e "${ERROR} Unknown option: $1"
            echo -e "${INFO} Use '$0 --help' for usage information"
            exit 1
            ;;
    esac
    
    # Main execution flow
    display_banner
    check_root
    check_compatibility
    check_python
    setup_python_environment
    download_core_script
    verify_core_script
    
    # Execute core Python script with arguments
    echo -e "${PROCESS} Launching core engine..."
    exec python3 "$CORE_SCRIPT" "$@"
}

# Error handling
trap 'echo -e "\n${ERROR} Script interrupted"; exit 130' INT TERM

# Execute main function with all arguments
main "$@"
