#!/usr/bin/env bash
#
# KYGOX - Advanced Security Testing Suite Installer
# Version 0.1.5 Stable
#
# Created by 0xb0rn3 IG: theehiv3 | github.com/0xb0rn3
# Enhanced with intelligent menu system and real-time progress
#

# ---
# CONFIGURATION
# ---
SCRIPT_VERSION="0.1.5"
ORIGINAL_USER=${SUDO_USER:-$(whoami)}
LOG_DIR="$HOME/.kygox"
MAIN_LOG="$LOG_DIR/kygox.log"
TOOL_SRC_DIR="/opt/kygox"
TEMP_DIR="/tmp/kygox_$$"

# System Detection
DISTRO=$(lsb_release -si 2>/dev/null || echo "Unknown")
DEBIAN_FAMILY=("Ubuntu" "Debian" "Kali" "Parrot")

# Flags
QUIET_MODE=false
AUTO_MODE=false
FULLKIT_MODE=false
PROGRESS_PID=""

# ---
# VISUAL COMPONENTS
# ---
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
BOLD='\033[1m'
DIM='\033[2m'
RESET='\033[0m'

# Icons
ROCKET="üöÄ"
SHIELD="üõ°Ô∏è"
HAMMER="üî®"
PHONE="üì±"
CHIP="üîß"
GEAR="‚öôÔ∏è"
CROWN="üëë"
LIGHTNING="‚ö°"
FIRE="üî•"

# ---
# PROGRESS INDICATOR
# ---
show_progress() {
    local message="$1"
    local chars="‚†ã‚†ô‚†π‚†∏‚†º‚†¥‚†¶‚†ß‚†á‚†è"
    local i=0
    
    while true; do
        printf "\r${CYAN}%s${RESET} %s ${DIM}Setting up your environment...${RESET}" \
               "${chars:$i:1}" "$message"
        i=$(((i + 1) % ${#chars}))
        sleep 0.1
    done
}

start_progress() {
    show_progress "$1" &
    PROGRESS_PID=$!
    disown
}

stop_progress() {
    if [ -n "$PROGRESS_PID" ]; then
        kill $PROGRESS_PID 2>/dev/null
        PROGRESS_PID=""
        printf "\r\033[K"
    fi
}

# ---
# BANNER AND DISPLAY
# ---
display_banner() {
    clear
    echo -e "${PURPLE}${BOLD}"
    cat << 'BANNER'
    ‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó
    ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïù
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù  ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ïî‚ïù 
    ‚ñà‚ñà‚ïî‚ïê‚ñà‚ñà‚ïó   ‚ïö‚ñà‚ñà‚ïî‚ïù  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó 
    ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë   ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïó
    ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù
    
    ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ
    ‚ñà  ADVANCED SECURITY TESTING SUITE INSTALLER  ‚ñà
    ‚ñà           Version 0.1.5 Stable              ‚ñà
    ‚ñà    Engineered by 0xb0rn3 | @theehiv3        ‚ñà
    ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ
BANNER
    echo -e "${RESET}"
}

# ---
# SYSTEM VALIDATION
# ---
check_debian_redirect() {
    for distro in "${DEBIAN_FAMILY[@]}"; do
        if [[ "$DISTRO" == "$distro" ]]; then
            echo -e "${RED}${BOLD}‚ö†Ô∏è  DEBIAN-BASED SYSTEM DETECTED${RESET}"
            echo -e "${WHITE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${RESET}"
            echo -e "${YELLOW}For Debian/Ubuntu systems, please use our specialized installer:${RESET}"
            echo -e "${CYAN}${BOLD}KRILIN${RESET} - Debian Security Suite"
            echo -e "${WHITE}Repository: ${BLUE}https://github.com/0xb0rn3/krilin${RESET}"
            echo -e "${WHITE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${RESET}"
            echo -e "${DIM}KYGOX is optimized for Arch-based systems only.${RESET}"
            exit 1
        fi
    done
}

check_root() {
    if [ "$EUID" -ne 0 ]; then
        echo -e "${RED}${BOLD}‚ùå Root privileges required${RESET}"
        echo -e "${WHITE}Please run: ${CYAN}sudo $0${RESET}"
        exit 1
    fi
    
    if [ -z "$ORIGINAL_USER" ] || [ "$ORIGINAL_USER" == "root" ]; then
        echo -e "${RED}${BOLD}‚ùå Invalid user context${RESET}"
        echo -e "${WHITE}Please run with: ${CYAN}sudo $0${RESET} (not as root directly)"
        exit 1
    fi
}

# ---
# TOOL CATEGORIES
# ---
declare -A TOOL_CATEGORIES

# Industry Standard Tools (Most Used)
TOOL_CATEGORIES[standard]="
nmap wireshark-qt aircrack-ng john hydra sqlmap metasploit
burpsuite ghidra radare2 gdb binwalk hashcat tcpdump
nikto gobuster dirb ffuf whatweb wpscan dnsenum dnsrecon
fierce masscan rustscan autopsy volatility rizin cutter
bettercap ettercap mitmproxy proxychains-ng tor openvpn
exploitdb impacket responder subfinder httpx nuclei
crackmapexec theharvester recon-ng maltego spiderfoot
sublist3r amass feroxbuster dirsearch beef-xss owasp-zap
weevely seclists crunch cupp enum4linux-ng smbclient
smbmap yersinia socat ncat chisel pwntools ropper
"

# Red Team Arsenal
TOOL_CATEGORIES[redteam]="
covenant-dotnet mitm6 rubeus mimikatz nishang
eyewitness gowitness katana gau waybackurls gf
chaos-client dnsx naabu mapcidr shuffledns puredns
massdns alterx tlsx proxify dalfox kxss qsreplace
unfurl hakrawler gospider paramspider arjun
droopescan joomscan cmseek wig wafw00f commix
tplmap nosqlmap xsser evilginx2 modlishka gophish
wifi-pumpkin3 hostapd-mana wifite hash-identifier
chntpw nbtscan-extra onesixtyone snmpwalk
cisco-torch dnscat2 iodine ptunnel icmptunnel
sslh stunnel sbd pwnat dns2tcp ligolo-ng
angr afl radamsa empire sliver kerbrute
"

# Blue Team Defense
TOOL_CATEGORIES[blueteam]="
suricata snort zeek ossec aide tripwire
chkrootkit rkhunter lynis openscap zmap
hping3 netdiscover arp-scan fping ntopng
iftop nethogs vnstat bmon tcpflow tcpreplay
ssldump dsniff tshark argus p0f fprobe
nfdump flow-tools silk pmacct darkstat
bandwidthd nagios icinga2 zabbix-server
zabbix-agent collectd telegraf prometheus
grafana influxdb elasticsearch logstash
kibana filebeat packetbeat metricbeat
heartbeat-elastic graylog fluentd rsyslog
syslog-ng logwatch logcheck multitail
lnav goaccess osquery clamav yara audit
"

# Mobile Security
TOOL_CATEGORIES[mobile]="
mobsf drozer apktool dex2jar jadx smali
baksmali aapt adb fastboot heimdall
frida-tools objection libimobiledevice
ifuse ideviceinstaller qark apkid
androguard droidlysis androwarn
quark-engine mariana-trench frida-server
frida-gadget passionfruit needle
introspy-android introspy-ios snoop-it
clutch4 dumpdecrypted flexdecrypt bfinject
cycript theos logos substrate substitute
ellekit dobby shadow xposed-framework
edxposed lsposed magisk btlejuice
btlejack mirage killerbee zigbee-tools
"

# IoT & Hardware
TOOL_CATEGORIES[iot]="
firmware-mod-kit firmadyne binwalk openocd
flashrom sigrok-cli pulseview multimon-ng
rtl-sdr hackrf gnuradio gqrx ubertooth
killerbee bus-pirate attifyos-tools
firmwalker goodfet logic2 saleae
"

# Complete Arsenal (All Tools)
TOOL_CATEGORIES[fullkit]="
${TOOL_CATEGORIES[standard]}
${TOOL_CATEGORIES[redteam]}
${TOOL_CATEGORIES[blueteam]}
${TOOL_CATEGORIES[mobile]}
${TOOL_CATEGORIES[iot]}
"

# ---
# INSTALLATION FUNCTIONS
# ---
setup_environment() {
    start_progress "Initializing system"
    
    # Create directories
    mkdir -p "$LOG_DIR" "$TOOL_SRC_DIR" "$TEMP_DIR"
    chown -R "$ORIGINAL_USER:$ORIGINAL_USER" "$LOG_DIR" "$TOOL_SRC_DIR"
    
    # Setup security repository (obfuscated)
    if ! grep -q "pentesting" /etc/pacman.conf; then
        curl -sS https://blackarch.org/strap.sh | bash &>/dev/null
        sed -i 's/blackarch/pentesting/g' /etc/pacman.conf
    fi
    
    # Update system
    pacman -Syy --noconfirm &>/dev/null
    
    # Install yay if needed
    if ! command -v yay &>/dev/null; then
        pacman -S --noconfirm --needed git go &>/dev/null
        sudo -u "$ORIGINAL_USER" git clone -q https://aur.archlinux.org/yay.git "$TEMP_DIR/yay"
        cd "$TEMP_DIR/yay"
        sudo -u "$ORIGINAL_USER" makepkg -si --noconfirm &>/dev/null
        cd - &>/dev/null
    fi
    
    stop_progress
    echo -e "${GREEN}‚úì${RESET} Environment initialized"
}

install_category() {
    local category="$1"
    local tools="${TOOL_CATEGORIES[$category]}"
    
    if [ -z "$tools" ]; then
        echo -e "${RED}‚ùå Unknown category: $category${RESET}"
        return 1
    fi
    
    start_progress "Installing $category toolkit"
    
    # Convert tools string to array
    IFS=' ' read -ra tool_array <<< "$tools"
    local total=${#tool_array[@]}
    local current=0
    
    for tool in "${tool_array[@]}"; do
        if [ -n "$tool" ]; then
            # Try official repos first, then AUR
            if pacman -Si "$tool" &>/dev/null; then
                pacman -S --noconfirm --needed "$tool" &>/dev/null
            elif ! pacman -Q "$tool" &>/dev/null; then
                sudo -u "$ORIGINAL_USER" yay -S --noconfirm --needed "$tool" &>/dev/null
            fi
            
            ((current++))
            local percent=$((current * 100 / total))
            stop_progress
            start_progress "Installing $category toolkit ($percent%)"
        fi
    done
    
    stop_progress
    echo -e "${GREEN}‚úì${RESET} $category toolkit installed"
}

install_zen_kernel() {
    if [[ "$(uname -r)" == *"zen"* ]]; then
        echo -e "${GREEN}‚úì${RESET} Zen kernel already active"
        return
    fi
    
    start_progress "Installing Zen kernel"
    pacman -S --noconfirm --needed linux-zen linux-zen-headers &>/dev/null
    grub-mkconfig -o /boot/grub/grub.cfg &>/dev/null
    stop_progress
    echo -e "${GREEN}‚úì${RESET} Zen kernel installed (reboot required)"
}

# ---
# MENU SYSTEM
# ---
show_main_menu() {
    clear
    display_banner
    
    echo -e "${WHITE}${BOLD}SELECT INSTALLATION MODE${RESET}"
    echo -e "${WHITE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${RESET}"
    echo
    echo -e "${CYAN}${BOLD}1${RESET}) ${GEAR} ${WHITE}Standard Suite${RESET}     ${DIM}Industry standard security tools${RESET}"
    echo -e "${CYAN}${BOLD}2${RESET}) ${ROCKET} ${WHITE}Red Team Arsenal${RESET}   ${DIM}Advanced offensive security tools${RESET}"
    echo -e "${CYAN}${BOLD}3${RESET}) ${SHIELD} ${WHITE}Blue Team Defense${RESET}  ${DIM}Defensive & monitoring tools${RESET}"
    echo -e "${CYAN}${BOLD}4${RESET}) ${PHONE} ${WHITE}Mobile Security${RESET}    ${DIM}iOS/Android security testing${RESET}"
    echo -e "${CYAN}${BOLD}5${RESET}) ${CHIP} ${WHITE}IoT & Hardware${RESET}     ${DIM}Hardware hacking & IoT tools${RESET}"
    echo -e "${CYAN}${BOLD}6${RESET}) ${CROWN} ${WHITE}Complete Arsenal${RESET}   ${DIM}All available security tools${RESET}"
    echo
    echo -e "${YELLOW}${BOLD}Advanced Options${RESET}"
    echo -e "${WHITE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${RESET}"
    echo -e "${CYAN}${BOLD}7${RESET}) ${LIGHTNING} ${WHITE}Zen Kernel${RESET}        ${DIM}Install high-performance kernel${RESET}"
    echo -e "${CYAN}${BOLD}8${RESET}) ${FIRE} ${WHITE}Custom Install${RESET}     ${DIM}Choose specific categories${RESET}"
    echo -e "${CYAN}${BOLD}9${RESET}) ${WHITE}Exit${RESET}                ${DIM}Exit installer${RESET}"
    echo
    echo -e "${WHITE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${RESET}"
    echo -ne "${WHITE}Select option ${CYAN}[1-9]${WHITE}: ${RESET}"
}

show_custom_menu() {
    clear
    display_banner
    
    echo -e "${WHITE}${BOLD}CUSTOM INSTALLATION${RESET}"
    echo -e "${WHITE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${RESET}"
    echo
    echo -e "${WHITE}Select multiple categories (space-separated):${RESET}"
    echo -e "${CYAN}1${RESET}) Standard Suite    ${CYAN}2${RESET}) Red Team Arsenal"
    echo -e "${CYAN}3${RESET}) Blue Team Defense ${CYAN}4${RESET}) Mobile Security"
    echo -e "${CYAN}5${RESET}) IoT & Hardware    ${CYAN}6${RESET}) Zen Kernel"
    echo
    echo -e "${WHITE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${RESET}"
    echo -ne "${WHITE}Enter selections ${CYAN}[1-6]${WHITE}: ${RESET}"
}

# ---
# MAIN EXECUTION
# ---
handle_selection() {
    local selection="$1"
    
    case $selection in
        1) install_category "standard" ;;
        2) install_category "redteam" ;;
        3) install_category "blueteam" ;;
        4) install_category "mobile" ;;
        5) install_category "iot" ;;
        6) install_category "fullkit" ;;
        7) install_zen_kernel ;;
        8) 
            show_custom_menu
            read -r custom_selections
            for sel in $custom_selections; do
                case $sel in
                    1) install_category "standard" ;;
                    2) install_category "redteam" ;;
                    3) install_category "blueteam" ;;
                    4) install_category "mobile" ;;
                    5) install_category "iot" ;;
                    6) install_zen_kernel ;;
                esac
            done
            ;;
        9) 
            echo -e "${YELLOW}Installation cancelled${RESET}"
            exit 0
            ;;
        *)
            echo -e "${RED}‚ùå Invalid selection${RESET}"
            return 1
            ;;
    esac
}

cleanup() {
    stop_progress
    rm -rf "$TEMP_DIR"
    
    # System cleanup
    start_progress "Cleaning up system"
    pacman -Rns --noconfirm $(pacman -Qtdq) &>/dev/null 2>&1
    pacman -Scc --noconfirm &>/dev/null
    stop_progress
    echo -e "${GREEN}‚úì${RESET} System cleaned up"
}

show_completion() {
    clear
    echo -e "${GREEN}${BOLD}"
    cat << 'COMPLETE'
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù
    ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  
    ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  
    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù   ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
COMPLETE
    echo -e "${RESET}"
    echo -e "${WHITE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${RESET}"
    echo -e "${GREEN}${BOLD}üéâ KYGOX INSTALLATION COMPLETE! üéâ${RESET}"
    echo -e "${WHITE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${RESET}"
    echo -e "${CYAN}Version: ${WHITE}$SCRIPT_VERSION${RESET}"
    echo -e "${CYAN}User: ${WHITE}$ORIGINAL_USER${RESET}"
    echo -e "${CYAN}Tools Directory: ${WHITE}$TOOL_SRC_DIR${RESET}"
    echo -e "${CYAN}Logs: ${WHITE}$LOG_DIR${RESET}"
    echo
    echo -e "${YELLOW}${BOLD}üíÄ HAPPY HACKING! üíÄ${RESET}"
    echo -e "${WHITE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${RESET}"
}

# ---
# PARAMETER HANDLING
# ---
handle_parameters() {
    case "$1" in
        -fullkit|--fullkit)
            echo -e "${ROCKET} ${WHITE}Full Kit Installation Mode${RESET}"
            setup_environment
            install_category "fullkit"
            install_zen_kernel
            cleanup
            show_completion
            exit 0
            ;;
        -standard|--standard)
            echo -e "${GEAR} ${WHITE}Standard Suite Installation${RESET}"
            setup_environment
            install_category "standard"
            cleanup
            show_completion
            exit 0
            ;;
        -redteam|--redteam)
            echo -e "${ROCKET} ${WHITE}Red Team Arsenal Installation${RESET}"
            setup_environment
            install_category "redteam"
            cleanup
            show_completion
            exit 0
            ;;
        -blueteam|--blueteam)
            echo -e "${SHIELD} ${WHITE}Blue Team Defense Installation${RESET}"
            setup_environment
            install_category "blueteam"
            cleanup
            show_completion
            exit 0
            ;;
        -mobile|--mobile)
            echo -e "${PHONE} ${WHITE}Mobile Security Installation${RESET}"
            setup_environment
            install_category "mobile"
            cleanup
            show_completion
            exit 0
            ;;
        -iot|--iot)
            echo -e "${CHIP} ${WHITE}IoT & Hardware Installation${RESET}"
            setup_environment
            install_category "iot"
            cleanup
            show_completion
            exit 0
            ;;
        -zen|--zen)
            echo -e "${LIGHTNING} ${WHITE}Zen Kernel Installation${RESET}"
            setup_environment
            install_zen_kernel
            cleanup
            show_completion
            exit 0
            ;;
        -h|--help)
            display_banner
            echo -e "${WHITE}${BOLD}USAGE:${RESET}"
            echo -e "${CYAN}sudo $0${RESET}                    ${DIM}# Interactive menu${RESET}"
            echo -e "${CYAN}sudo $0 -fullkit${RESET}           ${DIM}# Install complete arsenal${RESET}"
            echo -e "${CYAN}sudo $0 -standard${RESET}          ${DIM}# Install standard tools${RESET}"
            echo -e "${CYAN}sudo $0 -redteam${RESET}           ${DIM}# Install red team tools${RESET}"
            echo -e "${CYAN}sudo $0 -blueteam${RESET}          ${DIM}# Install blue team tools${RESET}"
            echo -e "${CYAN}sudo $0 -mobile${RESET}            ${DIM}# Install mobile security tools${RESET}"
            echo -e "${CYAN}sudo $0 -iot${RESET}               ${DIM}# Install IoT & hardware tools${RESET}"
            echo -e "${CYAN}sudo $0 -zen${RESET}               ${DIM}# Install Zen kernel${RESET}"
            exit 0
            ;;
    esac
}

# ---
# MAIN FUNCTION
# ---
main() {
    # Handle parameters first
    if [ $# -gt 0 ]; then
        handle_parameters "$1"
    fi
    
    # System checks
    check_debian_redirect
    check_root
    
    # Setup environment
    setup_environment
    
    # Main menu loop
    while true; do
        show_main_menu
        read -r selection
        
        if handle_selection "$selection"; then
            break
        fi
        
        echo -e "${RED}Please try again...${RESET}"
        sleep 2
    done
    
    # Cleanup and completion
    cleanup
    show_completion
}

# ---
# SIGNAL HANDLING
# ---
trap 'stop_progress; echo -e "\n${RED}Installation interrupted${RESET}"; exit 130' INT TERM

# ---
# ENTRY POINT
# ---
main "$@"
